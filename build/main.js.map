{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/models/flight-info.ts","webpack:///./src/app/prediction/prediction.component.css","webpack:///./src/app/prediction/prediction.component.html","webpack:///./src/app/prediction/prediction.component.ts","webpack:///./src/app/services/prediciton.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-expand-sm navbar-dark bg-dark\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">DB2 ML</a>\\n<div class=\\\"container-fluid\\\">  \\n</div>\\n</nav>\\n\\n<div class=\\\"container\\\">\\n    \\n        <app-prediction></app-prediction> \\n        <!-- <div class=\\\"col-sm-6\\\">\\n          <h2>Flight Information</h2>\\n          <app-prediction></app-prediction> \\n        </div>\\n        <div class=\\\"col-sm-6\\\">\\n          <h2>Prediction Result</h2>           \\n        </div> \\n      </div> -->\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'client';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { PredictionComponent } from './prediction/prediction.component';\nimport { PredictionService } from './services/prediciton.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PredictionComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [PredictionService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class FlightInfo {\n  // opCarrier: string;\n  // tailNum: string;\n  // manufacturer: string;\n  // model: string;\n  // origin: string;\n  // originCityName: string;\n  // dest: string;\n  // destCityName: string;\n  // month: number;\n  // dayOfWeek: number;\n  // depTimeBlk: string;\n\n  constructor(\n    public opCarrier: string,\n    public tailNum: string,\n    public manufacturer: string,\n    public flightModel: string,\n    public origin: string,\n    public originCityName: string,\n    public dest: string,\n    public destinationCityName: string,\n    public month: number,\n    public dayOfWeek: number,\n    public depTimeBlk: string\n\n  ) { }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <h2>Flight Information</h2>\\n    <div>\\n      <form (ngSubmit)=\\\"onSubmit()\\\" #predictionForm=\\\"ngForm\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"opCarrier\\\" class=\\\"control-label\\\">Carrier</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.opCarrier\\\" #opCarrier=\\\"ngModel\\\" class=\\\"form-control\\\"\\n            id=\\\"opCarrier\\\" name=\\\"opCarrier\\\" placeholder=\\\"DL\\\">\\n          <div [hidden]=\\\"opCarrier.valid || opCarrier.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Op Carrier is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"tailNum\\\" class=\\\"control-label\\\">Tail Number</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.tailNum\\\" #tailNum=\\\"ngModel\\\" class=\\\"form-control\\\" id=\\\"tailNum\\\"\\n            name=\\\"tailNum\\\" placeholder=\\\"N717TW\\\">\\n          <div [hidden]=\\\"tailNum.valid || tailNum.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Tail number is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"manufacturer\\\" class=\\\"control-label\\\">Manufacturer</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.manufacturer\\\" #manufacturer=\\\"ngModel\\\" class=\\\"form-control\\\"\\n            id=\\\"manufacturer\\\" name=\\\"manufacturer\\\" placeholder=\\\"Boeing\\\">\\n          <div [hidden]=\\\"manufacturer.valid || manufacturer.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Manufacturer is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"flightModel\\\" class=\\\"control-label\\\">Model</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.flightModel\\\" #flightModel=\\\"ngModel\\\" class=\\\"form-control\\\"\\n            id=\\\"model\\\" name=\\\"flightModel\\\" placeholder=\\\"B757-2\\\">\\n          <div [hidden]=\\\"flightModel.valid || flightModel.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Model is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"Origin\\\" class=\\\"control-label\\\">Origin</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.origin\\\" #origin=\\\"ngModel\\\" class=\\\"form-control\\\" id=\\\"origin\\\"\\n            name=\\\"origin\\\" placeholder=\\\"BOS\\\">\\n          <div [hidden]=\\\"origin.valid || origin.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Origin is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"originCityName\\\" class=\\\"control-label\\\">Origin City Name</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.originCityName\\\" #originCityName=\\\"ngModel\\\" class=\\\"form-control\\\"\\n            id=\\\"originCityName\\\" name=\\\"originCityName\\\" placeholder=\\\"Boston, MA\\\">\\n          <div [hidden]=\\\"originCityName.valid || originCityName.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Origin city name is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"dest\\\" class=\\\"control-label\\\">Destination</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.dest\\\" #dest=\\\"ngModel\\\" class=\\\"form-control\\\" id=\\\"dest\\\"\\n            name=\\\"dest\\\" placeholder=\\\"SFO\\\">\\n          <div [hidden]=\\\"dest.valid || dest.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Destination is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"destinationCityName\\\" class=\\\"control-label\\\">Destination City Name</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.destinationCityName\\\" #destinationCityName=\\\"ngModel\\\"\\n            class=\\\"form-control\\\" id=\\\"destinationCityName\\\" name=\\\"destinationCityName\\\" placeholder=\\\"San Fransisco, CA\\\">\\n          <div [hidden]=\\\"destinationCityName.valid || destinationCityName.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Destination city name is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"month\\\" class=\\\"control-label\\\">Month</label>\\n          <select class=\\\"form-control\\\" id=\\\"month\\\" name=\\\"month\\\" required [(ngModel)]=\\\"model.month\\\" #month=\\\"ngModel\\\">\\n            <option [ngValue]=\\\"mnth.code\\\" *ngFor=\\\"let mnth of months\\\">{{mnth.name}}</option>\\n          </select>\\n          <div [hidden]=\\\"month.valid || month.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Destination city name is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"dayOfWeek\\\" class=\\\"control-label\\\">Day of Week</label>\\n          <select class=\\\"form-control\\\" id=\\\"dayOfWeek\\\" name=\\\"dayOfWeek\\\" required [(ngModel)]=\\\"model.dayOfWeek\\\"\\n            #dayOfWeek=\\\"ngModel\\\">\\n            <option [ngValue]=\\\"day.code\\\" *ngFor=\\\"let day of dayOfWeeks\\\">{{day.name}}</option>\\n          </select>\\n\\n          <div [hidden]=\\\"dayOfWeek.valid || dayOfWeek.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Day of week is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"depTimeBlk\\\" class=\\\"control-label\\\">Departure Time Block</label>\\n          <input type=\\\"text\\\" required [(ngModel)]=\\\"model.depTimeBlk\\\" #depTimeBlk=\\\"ngModel\\\" class=\\\"form-control\\\"\\n            id=\\\"depTimeBlk\\\" name=\\\"depTimeBlk\\\" placeholder=\\\"1600-1659\\\">\\n          <div [hidden]=\\\"depTimeBlk.valid || depTimeBlk.pristine\\\" class=\\\"alert alert-danger\\\">\\n            Departure time block is required\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Predict</button>&nbsp;&nbsp;\\n          <!-- <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"!predictionForm.form.valid\\\">Predict</button>&nbsp;&nbsp; -->\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"newFlightInfo(); predictionForm.reset()\\\">Reset</button>\\n        </div>\\n\\n      </form>\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-6\\\">\\n    <h2>Prediction Result</h2>\\n    <table *ngIf=\\\"predictionForm.submitted\\\" class=\\\"table\\\">\\n      <thead class=\\\"thead-dark\\\">\\n        <th scope=\\\"col\\\">#</th>\\n        <th scope=\\\"col\\\">Source Delay</th>\\n        <th scope=\\\"col\\\">Prediction</th>\\n      </thead>\\n      <span ng-show=\\\"isLoading === true\\\">\\n          <i class=\\\"glyphicon glyphicon-refresh spinning\\\"></i>\\n      </span>    \\n      <tr *ngFor= \\\"let prediction of predictions\\\">\\n        <td>{{prediction.ID}}</td>\\n        <td>{{prediction.SOURCE_DELAY}}</td>\\n        <td>{{prediction.SOURCE_PREDICT}}</td>\\n      </tr>\\n    \\n    </table>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FlightInfo } from '../models/flight-info';\nimport { PredictionService } from '../services/prediciton.service';\nimport { FormGroup, Form } from '@angular/forms';\n\n@Component({\n  selector: 'app-prediction',\n  templateUrl: './prediction.component.html',\n  styleUrls: ['./prediction.component.css']\n})\nexport class PredictionComponent implements OnInit {\n\n  submitted = false;\n  // predictionForm: FormGroup;\n  model: FlightInfo;\n\n  isLoading = true;\n\n  predictions: any;\n\n  months: {} = [{\n    name: 'January',\n    code: '1'\n  },\n  {\n    name: 'February',\n    code: '2'\n  },\n  {\n    name: 'March',\n    code: '3'\n  },\n  {\n    name: 'April',\n    code: '4'\n  },\n  {\n    name: 'May',\n    code: '5'\n  },\n  {\n    name: 'June',\n    code: '6'\n  },\n  {\n    name: 'July',\n    code: '7'\n  },\n  {\n    name: 'August',\n    code: '8'\n  },\n  {\n    name: 'September',\n    code: '9'\n  },\n  {\n    name: 'October',\n    code: '10'\n  },\n  {\n    name: 'November',\n    code: '11'\n  },\n  {\n    name: 'December',\n    code: '12'\n  }];\n\n  dayOfWeeks: {} = [{\n    name: 'Sunday',\n    code: '1'\n  },\n  {\n    name: 'Monday',\n    code: '2'\n  },\n  {\n    name: 'Tuesday',\n    code: '3'\n  },\n  {\n    name: 'Wednesday',\n    code: '4'\n  },\n  {\n    name: 'Thursday',\n    code: '5'\n  },\n  {\n    name: 'Friday',\n    code: '6'\n  },\n  {\n    name: 'Saturday',\n    code: '7'\n  }];\n\n  constructor(private predictionService: PredictionService) { }\n\n  ngOnInit() {\n    this.model = new FlightInfo('', '', '', '', '', '', '', '', 0, 0, '');\n  }\n\n\n  onSubmit() {\n    console.log('Getting predictions result.');\n    // this.model = this.predictionForm.value;\n    console.log(this.model);\n    this.submitted = true;\n\n    this.predictionService.predict(this.model).subscribe(\n      (predictions) => {\n        this.isLoading = false;\n        console.log('Predictions Result');\n        console.log(predictions);\n        this.predictions = predictions;\n      });\n\n  }\n\n  newFlightInfo() {\n    console.log('Resetting..');\n    this.model = new FlightInfo('', '', '', '', '', '', '', '', 0, 0, '');\n  }\n\n}\n","/*\n * Copyright 2019 IBM All Rights Reserved.\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\n@Injectable()\nexport class PredictionService {\n\n    constructor(private http: HttpClient) { }\n\n    predict(flightInfo) {\n        const payload = JSON.stringify(flightInfo);\n\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json;charset=UTF-8',\n                'Accept': 'application/json',\n            })\n        };\n\n        return this.http.post(environment.predictionAPI, payload, httpOptions);\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  predictionAPI: '/api/predict'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}